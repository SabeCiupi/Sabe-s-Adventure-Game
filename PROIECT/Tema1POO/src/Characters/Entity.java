package Characters;

import Interfaces.Battle;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import Characters.Spells.*;

public abstract class Entity implements Battle {
    private List<Spell> abilities;
    private int currentHealth;
    private int maxHealth;
    private int currentMana;
    private int maxMana;
    private boolean isImmuneToFire;
    private boolean isImmuneToIce;
    private boolean isImmuneToEarth;

    // Constructor
    public Entity(int maxHealth, int maxMana, boolean isImmuneToFire, boolean isImmuneToIce, boolean isImmuneToEarth) {
        // Health + Mana
        this.maxHealth = maxHealth;
        currentHealth = maxHealth;
        this.maxMana = maxMana;
        currentMana = maxMana;

        // Immunities
        this.isImmuneToFire = isImmuneToFire;
        this.isImmuneToIce = isImmuneToIce;
        this.isImmuneToEarth = isImmuneToEarth;
    }

    public Entity() {
        this(1, 1, false, false, false);
    }

    //Getters + Setters
    public List<Spell> getAbilities() {
        return abilities;
    }

    public void setAbilities(List<Spell> abilities) {
        this.abilities = abilities;
    }

    public int getCurrentHealth() {
        return currentHealth;
    }

    public int getMaxHealth() {
        return maxHealth;
    }

    public int getMaxMana() {
        return maxMana;
    }

    public void setCurrentHealth(int currentHealth) {
        this.currentHealth = Math.max(0, Math.min(currentHealth, maxHealth));
    }

    public int getCurrentMana() {
        return currentMana;
    }

    public void setCurrentMana(int currentMana) {
        this.currentMana = Math.max(0, Math.min(currentMana, maxMana));
    }

    public boolean isImmuneToFire() {
        return isImmuneToFire;
    }

    public boolean isImmuneToIce() {
        return isImmuneToIce;
    }

    public boolean isImmuneToEarth() {
        return isImmuneToEarth;
    }

    // Method for health regeneration
    public void regenerateHealth(int amount) {
        setCurrentHealth(Math.min(currentHealth + amount, getMaxHealth()));
        System.out.println("Health regenerated by " + amount + ". Current health: " + currentHealth);
    }

    // Method for mana regeneration
    public void regenerateMana(int amount) {
        setCurrentMana(Math.min(currentMana + amount, getMaxMana()));
        System.out.println("Mana regenerated by " + amount + ". Current mana: " + currentMana);
    }

    // Method to use an ability
    public boolean useAbility(Spell spell, Entity target) {
        System.out.println("Using ability: ");
        System.out.println("Ability Name: " + spell.getName());
        System.out.println("Type: " + spell.getType());
        System.out.println("Damage: " + getDamage());
        System.out.println("Mana Cost: " + spell.getManaCost() + "\n");

        if (getCurrentMana() < spell.getManaCost()) {
            System.out.println("Oh no! You don't have enough mana to use " + spell.getName() + " :(");
            return false;
        }

        setCurrentMana(Math.max(getCurrentMana() - spell.getManaCost(), 0));

        // Check for immunity
        if ((spell instanceof Fire && target.isImmuneToFire) || (spell instanceof Ice && target.isImmuneToIce)
                || (spell instanceof Earth && target.isImmuneToEarth)) {
            System.out.println("The enemy is immune to " + spell.getType() + "! :(");
            return false;
        }

        System.out.print("Used " + spell.getName() + " on the enemy! Damage: " + (spell.getDamage()));
        System.out.println(". Mana left: " + currentMana);

        return true;
    }

    // Method to generate a random list of abilities
    public List<Spell> generateRandomAbilities() {
        // List of all abilities in the game
        List<Spell> allSpells = List.of(new Fire("Phoenix Flame", randomValue(20,50), randomValue(10, 30)),
                new Fire("Blazing Butterflies", randomValue(20, 30), randomValue(10, 15)),
                new Fire("Sunflower Spark", randomValue(15, 25), randomValue(8, 12)),
                new Fire("Phoenix Hug", randomValue(20, 40), randomValue(15, 20)),
                new Fire("Lava Lullaby", randomValue(25, 35), randomValue(12, 18)),
                new Ice("Snowball Barrage", randomValue(15, 40), randomValue(8, 25)),
                new Ice("Snowflake Dance", randomValue(10, 14), randomValue(4, 6)),
                new Ice("Aurora's Whisper", randomValue(22, 28), randomValue(11, 15)),
                new Ice("Icy Embrace", randomValue(12, 18), randomValue(6, 9)),
                new Ice("Northen Glow", randomValue(8, 12), randomValue(5, 7)),
                new Earth("Terra Surge", randomValue(25, 60), randomValue(20, 40)),
                new Earth("Mountain Blossom", randomValue(27, 35), randomValue(14, 18)),
                new Earth("Rockfall Cascade", randomValue(22, 28), randomValue(11, 15)),
                new Earth("Canyon Echo", randomValue(18, 26), randomValue(9, 13)),
                new Earth("Sandstorm Dance", randomValue(15, 22), randomValue(7, 10))
        );

        List<Spell> fireSpells = List.of(
                new Fire("Phoenix Flame", randomValue(20,50), randomValue(10, 30)),
                new Fire("Blazing Butterflies", randomValue(20, 30), randomValue(10, 15)),
                new Fire("Sunflower Spark", randomValue(15, 25), randomValue(8, 12)),
                new Fire("Phoenix Hug", randomValue(20, 40), randomValue(15, 20)),
                new Fire("Lava Lullaby", randomValue(25, 35), randomValue(12, 18))
        );

        List<Spell> iceSpells = List.of(
                new Ice("Snowball Barrage", randomValue(15, 40), randomValue(8, 25)),
                new Ice("Snowflake Dance", randomValue(10, 14), randomValue(4, 6)),
                new Ice("Aurora's Whisper", randomValue(22, 28), randomValue(11, 15)),
                new Ice("Icy Embrace", randomValue(12, 18), randomValue(6, 9)),
                new Ice("Northen Glow", randomValue(8, 12), randomValue(5, 7))
        );

        List<Spell> earthSpells = List.of(
                new Earth("Terra Surge", randomValue(25, 60), randomValue(20, 40)),
                new Earth("Mountain Blossom", randomValue(27, 35), randomValue(14, 18)),
                new Earth("Rockfall Cascade", randomValue(22, 28), randomValue(11, 15)),
                new Earth("Canyon Echo", randomValue(18, 26), randomValue(9, 13)),
                new Earth("Sandstorm Dance", randomValue(15, 22), randomValue(7, 10))
        );

        // Generate a list with 3-6 abilities
        Random random = new Random();
        List<Spell> abilities = new ArrayList<>();
        int nrAbilities = 3 + random.nextInt(4);

        abilities.add(fireSpells.get(random.nextInt(fireSpells.size())));
        abilities.add(iceSpells.get(random.nextInt(iceSpells.size())));
        abilities.add(earthSpells.get(random.nextInt(earthSpells.size())));

        while (abilities.size() < nrAbilities) {
            abilities.add(allSpells.get(random.nextInt(allSpells.size())));
        }

        return abilities;
    }

    // Method to generate a random value
    private static int randomValue(int min, int max) {
        return new Random().nextInt(max - min + 1) + min;
    }

    public abstract void levelUp();

    public abstract void increaseAttributes();
}
